# setup dir env with direnv
# emulate zsh -c "$(direnv export zsh)"
# prompt user while shell loading
  # define cache path
CACHE_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
[[ -r "$CACHE_FILE" ]] && source "$CACHE_FILE"
# enable direnv hook (e.g., when changing dir)
# emulate zsh -c "$(direnv hook zsh)"
export P10K_INSTANT_PROMPT_LOADED=1

# check and update chezmoi config
update_chezmoi() {
    local repo_path="$HOME/.local/share/chezmoi"
    cd "$repo_path" || return 1
    
    git fetch --quiet origin
    local local_rev=$(git rev-parse @)
    local remote_rev=$(git rev-parse @{u})
    
    if [ "$local_rev" != "$remote_rev" ]; then
        echo "Found new chezmoi changes. Pulling and applying updates..."
        git pull --quiet
        chezmoi apply
        # echo "Chezmoi config updated successfully!"
    fi
}

# check and update nix config
update_nix() {
    local repo_path="$HOME/.config/nix"
    cd "$repo_path" || return 1
    
    git fetch --quiet origin
    local local_rev=$(git rev-parse @)
    local remote_rev=$(git rev-parse @{u})
    
    if [ "$local_rev" != "$remote_rev" ]; then
        echo "Found new nix changes. Pulling and applying updates..."
        git pull --quiet
        nix profile upgrade --all
        # echo "Nix config updated successfully!"
    fi
}

# run updates concurrently
check_git_updates() {
    
    unsetopt MONITOR
    unsetopt NOTIFY

    # Store current directory
    PREV_DIR=$(pwd)
    
    # Run updates in background and capture PIDs
    update_chezmoi & CHEZMOI_PID=$!
    update_nix & NIX_PID=$!
    
    # Wait for both processes to complete
    wait $CHEZMOI_PID
    CHEZMOI_STATUS=$?
    wait $NIX_PID
    NIX_STATUS=$?
    
    # Return to previous directory
    cd "$PREV_DIR" || return 1
}

# Run the concurrent updates
check_git_updates
